import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.testng.annotations.Test;
import junit.framework.Assert;

/**
 * Test suite for the DNA class.
 * <p>
 * The provided test suite is correct and complete. You should not need to modify it. However, you
 * should understand it. You may need to augment or write test suites for later MPs.
 *
 * @see <a href="https://cs125.cs.illinois.edu/MP/6/">MP6 Documentation</a>
 */
public class DNATest {

    /** Timeout for DNA tests. Solution takes 100 ms.*/
    private static final int DNA_TEST_TIMEOUT = 10000;

    /**
     * Test longest common subsequence.
     */
    @Test(timeOut = DNA_TEST_TIMEOUT)
    public void testLongestCommonSubsequence() {
        for (DNATestResult testResult : PRECOMPUTED_DNA_TEST_RESULTS) {
            Assert.assertTrue(testResult.longestCommonSubsequences.contains(
                        DNA.getLongestCommonSubsequence(testResult.firstSequence,
                            testResult.secondSequence)));
        }
    }
    /**
     * Class for storing trees and pre-computed results for the DNA tests.
     */
    @SuppressWarnings("checkstyle:visibilitymodifier")
    public static class DNATestResult {

        /** First DNA sequence to compare. */
        public DNA firstSequence;

        /** Second DNA sequence to compare. */
        public DNA secondSequence;

        /** Result of the comparison. */
        public List<DNA> longestCommonSubsequences;

        /**
         * Create a new input for the DNA tests.
         *
         * @param setFirstSequence first DNA sequence to compare
         * @param setSecondSequence second DNA sequence to compare
         * @param setLongestCommonSubsequences result of the comparison
         */
        public DNATestResult(final DNA setFirstSequence, final DNA setSecondSequence,
                final List<DNA> setLongestCommonSubsequences) {
            firstSequence = setFirstSequence;
            secondSequence = setSecondSequence;
            longestCommonSubsequences = setLongestCommonSubsequences;
        }
    }

    /** Pre-computed DNA results to use for testing. */
    private static final List<DNATestResult> PRECOMPUTED_DNA_TEST_RESULTS = //
            new ArrayList<DNATestResult>();

    static {
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ACDG"), new DNA("ACDG"), Arrays.asList(
                    new DNA("acdg")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ACDG"), new DNA("AACCDDGG"), Arrays.asList(
                    new DNA("AcDg")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("AACC"), new DNA("DDGG"), Arrays.asList(
                    new DNA("")
                )));
        /* BEGIN AUTOGENERATED CODE */
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("dAAAgd"),
                new DNA("DdgGdag"), Arrays.asList(
                new DNA("DAG"),
                new DNA("dgD")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("DGcAaCa"),
                new DNA("DDGDdaADAaG"), Arrays.asList(
                new DNA("DgaAa")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("AGgAgdGaD"),
                new DNA("ccDAAgAC"), Arrays.asList(
                new DNA("aaga")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("agAa"),
                new DNA("DGDAacd"), Arrays.asList(
                new DNA("GAA")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("gDAdgGDggDacGdA"),
                new DNA("DCaAgaaGAgcaD"), Arrays.asList(
                new DNA("dAggGAd"),
                new DNA("daGggcd"),
                new DNA("DAGgACd"),
                new DNA("Daggagd"),
                new DNA("DaGGgCa"),
                new DNA("dAggAcA"),
                new DNA("DaGgaga")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ADAAAgggAA"),
                new DNA("CDdAdGGCCcgA"), Arrays.asList(
                new DNA("ADGGGa"),
                new DNA("dagGGA")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("DgAGAacC"),
                new DNA("ACDAcdADaG"), Arrays.asList(
                new DNA("daaA")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("AGGcdDAaca"),
                new DNA("GACaDagDAaCCdgGA"), Arrays.asList(
                new DNA("ACdDaACA"),
                new DNA("gcddaaCa")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("GGdaadAACcdGCCG"),
                new DNA("aAgad"), Arrays.asList(
                new DNA("aAaD")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("AGdCgaCadccagCD"),
                new DNA("GdaDDCAcccaAACdd"), Arrays.asList(
                new DNA("AdcaCcCAcD"),
                new DNA("GDCACCCaCD"),
                new DNA("GDaCACcACd")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("cCDCDDdaadg"),
                new DNA("AaAgcDdAGaAaGD"), Arrays.asList(
                new DNA("cddaAd"),
                new DNA("CddAAg")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ACGaGcGA"),
                new DNA("dadgdga"), Arrays.asList(
                new DNA("Agga")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("GgcdCcAcAaaCGcD"),
                new DNA("AGaDacDDAcddCDag"), Arrays.asList(
                new DNA("GdACacCd")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("AdCcacgAAdGAgaG"),
                new DNA("dGGAcgA"), Arrays.asList(
                new DNA("dgGAga")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("ADdCCDa"),
                new DNA("AADdgdcDdacCdGca"), Arrays.asList(
                new DNA("addccdA")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("gGCGCADACggAc"),
                new DNA("gAdaC"), Arrays.asList(
                new DNA("GadaC")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("dDgaAAcAdDgcG"),
                new DNA("CDacdDagggdDdaG"), Arrays.asList(
                new DNA("DacaddG"),
                new DNA("daCDdGG")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("dcADDDgAcgd"),
                new DNA("gGGCCcAccdaCGDG"), Arrays.asList(
                new DNA("caDaCGd")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("GdDgc"),
                new DNA("gDggGCD"), Arrays.asList(
                new DNA("GDGC")
                )));
        PRECOMPUTED_DNA_TEST_RESULTS.add(new DNATestResult(
                new DNA("DdcDdaccgg"),
                new DNA("DCcaGagDADgCaADC"), Arrays.asList(
                new DNA("dcddAC"),
                new DNA("DCDDCC"),
                new DNA("DCdAcC")
                )));
        /* END AUTOGENERATED CODE */
    }
}
